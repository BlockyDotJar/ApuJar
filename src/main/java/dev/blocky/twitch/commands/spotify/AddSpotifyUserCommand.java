/**
 * ApuJar - A useful bot for Twitch with many cool utility features.
 * Copyright (C) 2024 BlockyDotJar (aka. Dominic R.)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package dev.blocky.twitch.commands.spotify;

import com.github.twitch4j.TwitchClient;
import com.github.twitch4j.chat.TwitchChat;
import com.github.twitch4j.chat.events.channel.ChannelMessageEvent;
import com.github.twitch4j.common.events.domain.EventChannel;
import com.github.twitch4j.common.events.domain.EventUser;
import dev.blocky.twitch.interfaces.ICommand;
import dev.blocky.twitch.sql.SQLite;
import dev.blocky.twitch.utils.SQLUtils;
import edu.umd.cs.findbugs.annotations.NonNull;
import io.github.cdimascio.dotenv.Dotenv;
import se.michaelthelin.spotify.SpotifyApi;
import se.michaelthelin.spotify.SpotifyHttpManager;
import se.michaelthelin.spotify.model_objects.credentials.AuthorizationCodeCredentials;
import se.michaelthelin.spotify.requests.authorization.authorization_code.AuthorizationCodeRequest;

import java.net.URI;
import java.time.LocalDateTime;
import java.util.HashSet;

public class AddSpotifyUserCommand implements ICommand
{
    @Override
    public void onCommand(@NonNull ChannelMessageEvent event, @NonNull TwitchClient client, @NonNull String[] prefixedMessageParts, @NonNull String[] messageParts) throws Exception
    {
        TwitchChat chat = client.getChat();

        EventChannel channel = event.getChannel();
        String channelName = channel.getName();

        String message = event.getMessage();
        String[] msgParts = message.split(" ");

        if (msgParts.length == 1)
        {
            chat.sendMessage(channelName, "FeelsMan Please specify the Spotify authorization code that was generated by https://blockydotjar.github.io/ApuJar-Website/oauth2/spotify.html FeelsOkayMan");
            return;
        }

        String authCode = msgParts[1];

        if (!authCode.startsWith("AQ") || !authCode.matches("^[\\w-]{399}$"))
        {
            chat.sendMessage(channelName, "FeelsDankMan Invalid authorization code specified. (Authorization code must start with 'AQ' and contain 399 case insensitive letters with underscores [_], minuses [-] and numbers)");
            return;
        }

        Dotenv env = Dotenv.configure().filename(".spotify").load();

        String clientID = env.get("SPOTIFY_CLIENT_ID");
        String clientSecret = env.get("SPOTIFY_CLIENT_SECRET");
        URI redirectUri = SpotifyHttpManager.makeUri("https://blockydotjar.github.io/ApuJar-Website/oauth2/spotify/callback.html");

        SpotifyApi spotifyApi = new SpotifyApi.Builder()
                .setClientId(clientID)
                .setClientSecret(clientSecret)
                .setRedirectUri(redirectUri)
                .build();

        AuthorizationCodeRequest authorizationCodeRequest = spotifyApi.authorizationCode(authCode).build();
        AuthorizationCodeCredentials authCodeCredentials = authorizationCodeRequest.execute();

        String accessToken = authCodeCredentials.getAccessToken();
        String refreshToken = authCodeCredentials.getRefreshToken();
        int expiresIn = authCodeCredentials.getExpiresIn();

        LocalDateTime expiresOn = LocalDateTime.now().plusSeconds(expiresIn);

        HashSet<Integer> spotifyUserIDs = SQLUtils.getSpotifyUserIDs();

        EventUser user = event.getUser();
        String userID = user.getId();
        int id = Integer.parseInt(userID);

        if (!spotifyUserIDs.contains(id))
        {
            SQLite.onUpdate(STR."INSERT INTO spotifyCredentials(userID, accessToken, refreshToken, expiresOn) VALUES(\{id}, '\{accessToken}', '\{refreshToken}', '\{expiresOn}')");

            chat.sendMessage(channelName, "SeemsGood Successfully added Spotify credentials.");
            return;
        }

        SQLite.onUpdate(STR."UPDATE spotifyCredentials SET accessToken = '\{accessToken}', refreshToken = '\{refreshToken}', expiresOn = '\{expiresOn}' WHERE userID = \{id}");

        chat.sendMessage(channelName, "SeemsGood Successfully updated Spotify user in the database.");
    }
}
